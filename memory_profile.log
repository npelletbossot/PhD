
#- Launched -#

Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218     88.2 MiB     88.2 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269     88.2 MiB      0.0 MiB           1       title = (
  1270     88.2 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271     88.2 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272     88.2 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273     88.2 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274     88.2 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278     88.5 MiB      0.3 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279     88.5 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280     88.5 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281     88.5 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   3835.4 MiB   3746.9 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   3837.6 MiB      2.2 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   3840.6 MiB      2.9 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4011.0 MiB    170.4 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4019.9 MiB      9.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4014.4 MiB     -5.6 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4104.7 MiB     90.4 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4210.9 MiB    106.2 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218     88.1 MiB     88.1 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269     88.2 MiB      0.0 MiB           1       title = (
  1270     88.2 MiB      0.1 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271     88.2 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272     88.2 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273     88.2 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274     88.2 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278     88.5 MiB      0.3 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279     88.5 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280     88.5 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281     88.5 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   3836.0 MiB   3747.5 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   3838.3 MiB      2.2 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   3841.2 MiB      3.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4010.7 MiB    169.4 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4019.8 MiB      9.1 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4014.1 MiB     -5.7 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4104.9 MiB     90.9 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4211.0 MiB    106.1 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    396.3 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    393.3 MiB     -3.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    393.3 MiB      0.0 MiB          53       data_result = {
  1316    393.3 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    393.3 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    393.3 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    393.3 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    393.3 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    393.3 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    393.3 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    393.3 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    393.3 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    393.3 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    393.3 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    393.3 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    393.3 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    393.3 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    393.3 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    393.3 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    393.3 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    462.9 MiB     69.7 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    462.9 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    462.9 MiB      0.0 MiB          53           del data_result[key]
  1349    462.9 MiB      0.0 MiB          53           if key in locals():
  1350    462.9 MiB      0.0 MiB          53               del locals()[key]
  1351    462.9 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    462.9 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    219.2 MiB    219.2 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    396.4 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    393.5 MiB     -3.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    393.5 MiB      0.0 MiB          53       data_result = {
  1316    393.5 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    393.5 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    393.5 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    393.5 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    393.5 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    393.5 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    393.5 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    393.5 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    393.5 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    393.5 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    393.5 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    393.5 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    393.5 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    393.5 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    393.5 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    393.5 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    393.5 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    459.1 MiB     65.6 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    459.1 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    459.1 MiB      0.0 MiB          53           del data_result[key]
  1349    459.1 MiB      0.0 MiB          53           if key in locals():
  1350    459.1 MiB      0.0 MiB          53               del locals()[key]
  1351    459.1 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    459.1 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    232.5 MiB    232.5 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    219.2 MiB      0.0 MiB           1       title = (
  1270    219.2 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    219.2 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    219.2 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    219.2 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    219.2 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    219.2 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    219.2 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    219.2 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    219.2 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4060.3 MiB   3841.1 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4060.3 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4060.3 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4169.5 MiB    109.3 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4169.5 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4177.0 MiB      7.5 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4165.6 MiB    -11.4 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4275.8 MiB    110.1 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    461.1 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    459.1 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    459.1 MiB      0.0 MiB          53       data_result = {
  1316    459.1 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    459.1 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    459.1 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    459.1 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    459.1 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    459.1 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    459.1 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    459.1 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    459.1 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    459.1 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    459.1 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    459.1 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    459.1 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    459.1 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    459.1 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    459.1 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    459.1 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    459.0 MiB     -0.1 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    459.0 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    459.0 MiB      0.0 MiB          53           del data_result[key]
  1349    459.0 MiB      0.0 MiB          53           if key in locals():
  1350    459.0 MiB      0.0 MiB          53               del locals()[key]
  1351    459.0 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    459.0 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    239.0 MiB    239.0 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    239.0 MiB      0.0 MiB           1       title = (
  1270    239.0 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    239.0 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    239.0 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    239.0 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    239.0 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    239.0 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    239.0 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    239.0 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    239.0 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4064.8 MiB   3825.8 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4064.8 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4064.8 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4168.7 MiB    103.9 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4168.7 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4188.9 MiB     20.2 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4161.2 MiB    -27.7 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4271.6 MiB    110.4 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    456.9 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    454.9 MiB     -2.0 MiB           1       gc.collect()
  1268                                             # File
  1269    232.5 MiB      0.0 MiB           1       title = (
  1270    232.5 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    232.5 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    232.5 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    232.5 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    232.5 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    232.5 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    232.5 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    232.5 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    232.5 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4055.1 MiB   3822.6 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4055.1 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4055.1 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4172.6 MiB    117.4 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4172.6 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4191.7 MiB     19.2 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4165.0 MiB    -26.7 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4278.0 MiB    113.0 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    463.4 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    460.4 MiB     -3.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    460.4 MiB      0.0 MiB          53       data_result = {
  1316    460.4 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    460.4 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    460.4 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    460.4 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    460.4 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    460.4 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    460.4 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    460.4 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    460.4 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    460.4 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    460.4 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    460.4 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    460.4 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    460.4 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    460.4 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    460.4 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    460.4 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    464.2 MiB      3.7 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    464.2 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    464.2 MiB      0.0 MiB          53           del data_result[key]
  1349    464.2 MiB      0.0 MiB          53           if key in locals():
  1350    464.2 MiB      0.0 MiB          53               del locals()[key]
  1351    464.2 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    464.2 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    240.4 MiB    240.4 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    240.4 MiB      0.0 MiB           1       title = (
  1270    240.4 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    240.4 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    240.4 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    240.4 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    240.4 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    240.4 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    240.4 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    240.4 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    240.4 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4068.3 MiB   3828.0 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4068.3 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4068.3 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4174.5 MiB    106.2 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4174.5 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4193.1 MiB     18.6 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4165.6 MiB    -27.6 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4278.2 MiB    112.6 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    463.6 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    461.6 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    454.9 MiB      0.0 MiB          53       data_result = {
  1316    454.9 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    454.9 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    454.9 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    454.9 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    454.9 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    454.9 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    454.9 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    454.9 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    454.9 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    454.9 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    454.9 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    454.9 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    454.9 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    454.9 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    454.9 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    454.9 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    454.9 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    465.1 MiB     10.1 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    465.1 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    465.1 MiB      0.0 MiB          53           del data_result[key]
  1349    465.1 MiB      0.0 MiB          53           if key in locals():
  1350    465.1 MiB      0.0 MiB          53               del locals()[key]
  1351    465.1 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    465.1 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    249.8 MiB    249.8 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    249.8 MiB      0.0 MiB           1       title = (
  1270    249.8 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    249.8 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    461.6 MiB      0.0 MiB          53       data_result = {
  1316    461.6 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    461.6 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    461.6 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    461.6 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    461.6 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    461.6 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    461.6 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    461.6 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    461.6 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    461.6 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    461.6 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    461.6 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    461.6 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    461.6 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    461.6 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    461.6 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    461.6 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    463.3 MiB      1.7 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    463.3 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    463.3 MiB      0.0 MiB          53           del data_result[key]
  1349    463.3 MiB      0.0 MiB          53           if key in locals():
  1350    463.3 MiB      0.0 MiB          53               del locals()[key]
  1351    462.3 MiB     -1.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    462.3 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    247.7 MiB    247.7 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    247.7 MiB      0.0 MiB           1       title = (
  1270    247.7 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    247.7 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    249.8 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    249.8 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    249.8 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    249.8 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    249.8 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    249.8 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    249.8 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4076.0 MiB   3826.2 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4076.0 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4076.0 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4177.7 MiB    101.7 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4177.7 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4198.0 MiB     20.3 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4206.4 MiB      8.5 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4281.2 MiB     74.8 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    466.5 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    464.5 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    464.5 MiB      0.0 MiB          53       data_result = {
  1316    464.5 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    464.5 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    464.5 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    464.5 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    464.5 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    464.5 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    464.5 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    464.5 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    464.5 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    464.5 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    464.5 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    464.5 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    464.5 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    464.5 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    464.5 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    464.5 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    464.5 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    452.6 MiB    -11.9 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    452.6 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    452.6 MiB      0.0 MiB          53           del data_result[key]
  1349    452.6 MiB      0.0 MiB          53           if key in locals():
  1350    452.6 MiB      0.0 MiB          53               del locals()[key]
  1351    452.6 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    452.6 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    239.9 MiB    239.9 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    239.9 MiB      0.0 MiB           1       title = (
  1270    239.9 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    239.9 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    239.9 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    239.9 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    239.9 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    239.9 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    239.9 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    239.9 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    239.9 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4066.0 MiB   3826.1 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4066.0 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4066.0 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4163.8 MiB     97.7 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4163.8 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4183.7 MiB     20.0 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4156.1 MiB    -27.7 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4266.4 MiB    110.3 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    451.8 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    449.8 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    449.8 MiB      0.0 MiB          53       data_result = {
  1316    449.8 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1272    247.7 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    247.7 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    247.7 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    247.7 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    247.7 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    247.7 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    247.7 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4076.4 MiB   3828.7 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4076.4 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4076.4 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4174.5 MiB     98.1 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4174.5 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4192.4 MiB     17.9 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4164.3 MiB    -28.1 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4277.0 MiB    112.7 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    462.5 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    460.5 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    460.5 MiB      0.0 MiB          53       data_result = {
  1316    460.5 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    460.5 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    460.5 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    460.5 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    460.5 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    460.5 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    460.5 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    460.5 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    460.5 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    460.5 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    460.5 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    460.5 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    460.5 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    460.5 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    460.5 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    460.5 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    460.5 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    462.2 MiB      1.7 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    462.2 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    462.2 MiB      0.0 MiB          53           del data_result[key]
  1349    462.2 MiB      0.0 MiB          53           if key in locals():
  1350    462.2 MiB      0.0 MiB          53               del locals()[key]
  1351    462.2 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    462.2 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    250.4 MiB    250.4 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    250.4 MiB      0.0 MiB           1       title = (
  1270    250.4 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    250.4 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    250.4 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    250.4 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    250.4 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    250.4 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    250.4 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    250.4 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    250.4 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4079.6 MiB   3829.2 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4079.6 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4079.6 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4173.9 MiB     94.2 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4173.9 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4191.0 MiB     17.1 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4163.4 MiB    -27.6 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4275.9 MiB    112.6 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    461.4 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    459.4 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    459.4 MiB      0.0 MiB          53       data_result = {
  1316    459.4 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    449.8 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    449.8 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    449.8 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    449.8 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    449.8 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    449.8 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    449.8 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    449.8 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    449.8 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    449.8 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    449.8 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    449.8 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    449.8 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    449.8 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    449.8 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    449.8 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    462.2 MiB     12.3 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    462.2 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    462.2 MiB      0.0 MiB          53           del data_result[key]
  1349    462.2 MiB      0.0 MiB          53           if key in locals():
  1350    462.2 MiB      0.0 MiB          53               del locals()[key]
  1351    461.2 MiB     -1.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    461.2 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    252.7 MiB    252.7 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    252.7 MiB      0.0 MiB           1       title = (
  1270    252.7 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    252.7 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    252.7 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    252.7 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    252.7 MiB      0.0 MiB           1       if not os.path.exists(title):
  1317    459.4 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    459.4 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    459.4 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    459.4 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    459.4 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    459.4 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    459.4 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    459.4 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    459.4 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    459.4 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    459.4 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    459.4 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    459.4 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    459.4 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    459.4 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    459.4 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    460.4 MiB      1.0 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    460.4 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    460.4 MiB      0.0 MiB          53           del data_result[key]
  1349    460.4 MiB      0.0 MiB          53           if key in locals():
  1350    460.4 MiB      0.0 MiB          53               del locals()[key]
  1351    460.4 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    460.4 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    251.8 MiB    251.8 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    251.8 MiB      0.0 MiB           1       title = (
  1270    251.8 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    251.8 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    251.8 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    251.8 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    251.8 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    252.7 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    252.7 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    252.7 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    252.7 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4079.2 MiB   3826.5 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4079.2 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4079.2 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4172.8 MiB     93.7 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4172.8 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4192.8 MiB     19.9 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4165.4 MiB    -27.4 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4276.4 MiB    111.0 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    461.8 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    459.8 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    459.8 MiB      0.0 MiB          53       data_result = {
  1316    459.8 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    459.8 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    459.8 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    459.8 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    459.8 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    459.8 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    459.8 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    459.8 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    459.8 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    459.8 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    459.8 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    459.8 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    459.8 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    459.8 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    459.8 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    459.8 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    459.8 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    461.8 MiB      2.0 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    461.8 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    461.8 MiB      0.0 MiB          53           del data_result[key]
  1349    461.8 MiB      0.0 MiB          53           if key in locals():
  1350    461.8 MiB      0.0 MiB          53               del locals()[key]
  1351    461.8 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    461.8 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    269.5 MiB    269.5 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    269.5 MiB      0.0 MiB           1       title = (
  1270    269.5 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    269.5 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    269.5 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    269.5 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    269.5 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    269.5 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    269.5 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    269.5 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    269.5 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4096.1 MiB   3826.6 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4096.1 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4096.1 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4173.4 MiB     77.3 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4173.4 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4193.1 MiB     19.7 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4165.3 MiB    -27.8 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4275.6 MiB    110.2 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    461.1 MiB  -3814.5 MiB           1       del alpha_matrix
  1312    459.1 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    459.1 MiB      0.0 MiB          53       data_result = {
  1316    459.1 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    459.1 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    459.1 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    459.1 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    251.8 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    251.8 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    251.8 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    251.8 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4080.9 MiB   3829.2 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4080.9 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4080.9 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4172.6 MiB     91.7 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4172.6 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4189.8 MiB     17.2 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4162.4 MiB    -27.5 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4275.3 MiB    113.0 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    460.7 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    458.7 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    458.7 MiB      0.0 MiB          53       data_result = {
  1316    458.7 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    458.7 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    458.7 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    458.7 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    458.7 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    458.7 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    458.7 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    458.7 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    458.7 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    458.7 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    458.7 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    458.7 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    458.7 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    458.7 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    458.7 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    458.7 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    458.7 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    460.7 MiB      2.0 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    460.7 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    460.7 MiB      0.0 MiB          53           del data_result[key]
  1349    460.7 MiB      0.0 MiB          53           if key in locals():
  1350    460.7 MiB      0.0 MiB          53               del locals()[key]
  1351    460.7 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    460.7 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    252.7 MiB    252.7 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    252.7 MiB      0.0 MiB           1       title = (
  1270    252.7 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    252.7 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    252.7 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    252.7 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    252.7 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    252.7 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    252.7 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    252.7 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    252.7 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4081.7 MiB   3829.0 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4081.7 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4081.7 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4172.3 MiB     90.6 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4172.3 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4189.4 MiB     17.2 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4161.9 MiB    -27.6 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4274.9 MiB    113.0 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    460.2 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    458.3 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    458.3 MiB      0.0 MiB          53       data_result = {
  1316    458.3 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    458.3 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    458.3 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    458.3 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    459.1 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    459.1 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    459.1 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    459.1 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    459.1 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    459.1 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    459.1 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    459.1 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    459.1 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    459.1 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    459.1 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    459.1 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    459.1 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    461.0 MiB      1.9 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    461.0 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    461.0 MiB      0.0 MiB          53           del data_result[key]
  1349    461.0 MiB      0.0 MiB          53           if key in locals():
  1350    461.0 MiB      0.0 MiB          53               del locals()[key]
  1351    461.0 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    461.0 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    260.5 MiB    260.5 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    260.5 MiB      0.0 MiB           1       title = (
  1270    260.5 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    260.5 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    260.5 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    260.5 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    260.5 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    260.5 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1320                                         
  1321    458.3 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    458.3 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    458.3 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    458.3 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    458.3 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    458.3 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    458.3 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    458.3 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    458.3 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    458.3 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    458.3 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    458.3 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    458.3 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    461.2 MiB      3.0 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    461.2 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    461.2 MiB      0.0 MiB          53           del data_result[key]
  1349    461.2 MiB      0.0 MiB          53           if key in locals():
  1350    461.2 MiB      0.0 MiB          53               del locals()[key]
  1351    460.3 MiB     -1.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    460.3 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    267.0 MiB    267.0 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    267.0 MiB      0.0 MiB           1       title = (
  1270    267.0 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    267.0 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    267.0 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    267.0 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    267.0 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    267.0 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    260.5 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    260.5 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    260.5 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4087.1 MiB   3826.5 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4087.1 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4087.1 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4173.7 MiB     86.6 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4173.7 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4193.6 MiB     19.9 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4165.9 MiB    -27.7 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4276.4 MiB    110.5 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    461.7 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    459.7 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    459.7 MiB      0.0 MiB          53       data_result = {
  1316    459.7 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    459.7 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    459.7 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    459.7 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    459.7 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    459.7 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    459.7 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    459.7 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    459.7 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    459.7 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    459.7 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    459.7 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    459.7 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    459.7 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    459.7 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    459.7 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    459.7 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    459.6 MiB     -0.1 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    459.6 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    459.6 MiB      0.0 MiB          53           del data_result[key]
  1349    459.6 MiB      0.0 MiB          53           if key in locals():
  1350    459.6 MiB      0.0 MiB          53               del locals()[key]
  1351    459.6 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    459.6 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    259.0 MiB    259.0 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    259.0 MiB      0.0 MiB           1       title = (
  1270    259.0 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    259.0 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    259.0 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    259.0 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    259.0 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    259.0 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    259.0 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    259.0 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    259.0 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4085.3 MiB   3826.3 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4085.3 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4085.3 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4171.9 MiB     86.6 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4171.9 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4192.1 MiB     20.1 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4164.4 MiB    -27.6 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4274.8 MiB    110.4 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    460.1 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    458.2 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    458.2 MiB      0.0 MiB          53       data_result = {
  1316    458.2 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    458.2 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    458.2 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    458.2 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    458.2 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    458.2 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    458.2 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1279    267.0 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    267.0 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    267.0 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4096.3 MiB   3829.2 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4096.3 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4096.3 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4172.7 MiB     76.5 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4172.7 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4189.7 MiB     17.0 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4161.9 MiB    -27.8 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4277.1 MiB    115.2 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    462.4 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    460.4 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    460.4 MiB      0.0 MiB          53       data_result = {
  1316    460.4 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    460.4 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    460.4 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    460.4 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    460.4 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    460.4 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    460.4 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    460.4 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    460.4 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    460.4 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    460.4 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    460.4 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    460.4 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    460.4 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    460.4 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    460.4 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    460.4 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    463.7 MiB      3.3 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    463.7 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    463.7 MiB      0.0 MiB          53           del data_result[key]
  1349    463.7 MiB      0.0 MiB          53           if key in locals():
  1350    463.7 MiB      0.0 MiB          53               del locals()[key]
  1351    463.7 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    463.7 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    265.5 MiB    265.5 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    265.5 MiB      0.0 MiB           1       title = (
  1270    265.5 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    265.5 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    265.5 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    265.5 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    265.5 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    265.5 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    265.5 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    265.5 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    265.5 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4094.3 MiB   3828.8 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4094.3 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4094.3 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4173.4 MiB     79.0 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4173.4 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4190.9 MiB     17.5 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4200.9 MiB     10.0 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4276.2 MiB     75.3 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    461.6 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    459.6 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    459.6 MiB      0.0 MiB          53       data_result = {
  1316    459.6 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    459.6 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    459.6 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    459.6 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    459.6 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    459.6 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    459.6 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    458.2 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    458.2 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    458.2 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    458.2 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    458.2 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    458.2 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    458.2 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    458.2 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    458.2 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    458.2 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    461.3 MiB      3.1 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    461.3 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    461.3 MiB      0.0 MiB          53           del data_result[key]
  1349    461.3 MiB      0.0 MiB          53           if key in locals():
  1350    461.3 MiB      0.0 MiB          53               del locals()[key]
  1351    461.3 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    461.3 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    260.8 MiB    260.8 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    260.8 MiB      0.0 MiB           1       title = (
  1270    260.8 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    260.8 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    260.8 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    260.8 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    260.8 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    260.8 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    260.8 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    260.8 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1324    459.6 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    459.6 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    459.6 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    459.6 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    459.6 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    459.6 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    459.6 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    459.6 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    459.6 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    459.6 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    463.9 MiB      4.3 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    463.9 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    463.9 MiB      0.0 MiB          53           del data_result[key]
  1349    463.9 MiB      0.0 MiB          53           if key in locals():
  1350    463.9 MiB      0.0 MiB          53               del locals()[key]
  1351    463.9 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    463.9 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    262.8 MiB    262.8 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    262.8 MiB      0.0 MiB           1       title = (
  1270    262.8 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    262.8 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    262.8 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    262.8 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    262.8 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    262.8 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    262.8 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    262.8 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    260.8 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4087.4 MiB   3826.6 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4087.4 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4087.4 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4173.7 MiB     86.3 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4173.7 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4193.9 MiB     20.2 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4166.4 MiB    -27.5 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4277.4 MiB    111.0 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    462.7 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    460.7 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    460.7 MiB      0.0 MiB          53       data_result = {
  1316    460.7 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    460.7 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    460.7 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    460.7 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    460.7 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    460.7 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    460.7 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    460.7 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    460.7 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    460.7 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    460.7 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    460.7 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    460.7 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    460.7 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    460.7 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    460.7 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    460.7 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    472.0 MiB     11.3 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    472.0 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    472.0 MiB      0.0 MiB          53           del data_result[key]
  1349    472.0 MiB      0.0 MiB          53           if key in locals():
  1350    472.0 MiB      0.0 MiB          53               del locals()[key]
  1351    472.0 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    472.0 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    272.8 MiB    272.8 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    272.8 MiB      0.0 MiB           1       title = (
  1270    272.8 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    272.8 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    272.8 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    272.8 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    272.8 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    272.8 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    272.8 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    272.8 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    272.8 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4099.6 MiB   3826.8 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4099.6 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4099.6 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4183.0 MiB     83.4 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4183.0 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4202.8 MiB     19.8 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4175.3 MiB    -27.5 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4286.1 MiB    110.8 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    471.4 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    469.4 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    469.4 MiB      0.0 MiB          53       data_result = {
  1316    469.4 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    469.4 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    469.4 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    469.4 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    469.4 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    469.4 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    469.4 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    469.4 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    469.4 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1281    262.8 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4091.4 MiB   3828.6 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4091.4 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4091.4 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4174.9 MiB     83.5 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4174.9 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4192.4 MiB     17.5 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4164.6 MiB    -27.8 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4287.0 MiB    122.4 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    472.3 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    470.4 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    470.4 MiB      0.0 MiB          53       data_result = {
  1316    470.4 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    470.4 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    470.4 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    470.4 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    470.4 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    470.4 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    470.4 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    470.4 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    470.4 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    470.4 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    470.4 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    470.4 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    470.4 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    470.4 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    470.4 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    470.4 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    470.4 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    478.0 MiB      7.6 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    478.0 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    478.0 MiB      0.0 MiB          53           del data_result[key]
  1349    478.0 MiB      0.0 MiB          53           if key in locals():
  1350    478.0 MiB      0.0 MiB          53               del locals()[key]
  1351    478.0 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    478.0 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    270.4 MiB    270.4 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    270.4 MiB      0.0 MiB           1       title = (
  1270    270.4 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    270.4 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    270.4 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    270.4 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    270.4 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    270.4 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    270.4 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    270.4 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    270.4 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4099.6 MiB   3829.2 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4099.6 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4099.6 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4180.6 MiB     81.0 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4180.6 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4197.7 MiB     17.1 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4169.9 MiB    -27.7 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4283.0 MiB    113.0 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    468.3 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    466.3 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    466.3 MiB      0.0 MiB          53       data_result = {
  1316    466.3 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    466.3 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    466.3 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    466.3 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    466.3 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    466.3 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    466.3 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    466.3 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    466.3 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    469.4 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    469.4 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    469.4 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    469.4 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    469.4 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    469.4 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    469.4 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    469.4 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    461.8 MiB     -7.7 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    461.8 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    461.8 MiB      0.0 MiB          53           del data_result[key]
  1349    461.8 MiB      0.0 MiB          53           if key in locals():
  1350    461.8 MiB      0.0 MiB          53               del locals()[key]
  1351    461.8 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    461.8 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    265.8 MiB    265.8 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    265.8 MiB      0.0 MiB           1       title = (
  1270    265.8 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    265.8 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    265.8 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    265.8 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    265.8 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    265.8 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    265.8 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    265.8 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    265.8 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1327    466.3 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    466.3 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    466.3 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    466.3 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    466.3 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    466.3 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    466.3 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    466.3 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    463.8 MiB     -2.6 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    463.8 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    463.8 MiB      0.0 MiB          53           del data_result[key]
  1349    463.8 MiB      0.0 MiB          53           if key in locals():
  1350    463.8 MiB      0.0 MiB          53               del locals()[key]
  1351    463.8 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    463.8 MiB      0.0 MiB           1       return None


Filename: /home/nicolas/Documents/Progs/nucleo_bis.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
  1218    267.5 MiB    267.5 MiB           1   @profile
  1219                                         def sw_nucleo(
  1220                                             alpha_choice: str, 
  1221                                             s: int, 
  1222                                             l: int, 
  1223                                             bpmin: int, 
  1224                                             mu: float, 
  1225                                             theta: float, 
  1226                                             nt: int, 
  1227                                             tmax: float, 
  1228                                             dt: float, 
  1229                                             alphao: float, 
  1230                                             alphaf: float, 
  1231                                             beta: float, 
  1232                                             Lmin: int, 
  1233                                             Lmax: int, 
  1234                                             origin: int, 
  1235                                             bps: int
  1236                                         ) -> None:
  1237                                             """
  1238                                             Simulates condensin dynamics along chromatin with specified parameters.
  1239                                         
  1240                                             Args:
  1241                                                 alpha_choice (str): Choice of the alpha configuration ('nt_random', 'periodic', 'constant_mean').
  1242                                                 s (int): Value of s, nucleosome size.
  1243                                                 l (int): Value of l, linker length.
  1244                                                 bpmin (int): Minimum base pair threshold.
  1245                                                 mu (float): Mean value for the distribution used in the simulation.
  1246                                                 theta (float): Standard deviation for the distribution used in the simulation.
  1247                                                 nt (int): Number of trajectories for the simulation.
  1248                                                 tmax (float): Maximum time for the simulation.
  1249                                                 dt (float): Time step increment.
  1250                                                 alphao (float): Probability of beeing accepted on nucleosome sites.
  1251                                                 alphaf (float): Probability of beeing accepted on linker sites.
  1252                                                 beta (float): Unfolding probability.
  1253                                                 Lmin (int): First point of chromatin.
  1254                                                 Lmax (int): Last point of chromatin.
  1255                                                 origin (int): Starting position for the simulation.
  1256                                                 bps (int): Number of base pairs per site.
  1257                                         
  1258                                             Returns:
  1259                                                 None: This function does not return any value. It performs a simulation and saves results in a file.
  1260                                         
  1261                                             Note:
  1262                                                 - The function assumes that all inputs are valid and within the expected range.
  1263                                                 - This function is a core part of the nucleosome simulation pipeline.
  1264                                             """
  1265                                         
  1266                                             # --- Initialization --- #
  1267                                         
  1268                                             # File
  1269    267.5 MiB      0.0 MiB           1       title = (
  1270    267.5 MiB      0.0 MiB          13               f'__alpha_choice_{alpha_choice}__s_{s}__l_{l}__bpmin_{bpmin}__'
  1271    267.5 MiB      0.0 MiB           5               f'mu_{mu}__theta_{theta}__nt_{nt}__tmax_{tmax}__dt_{dt}__'
  1272    267.5 MiB      0.0 MiB           3               f'alphao_{alphao}__alphaf_{alphaf}__beta_{beta}__'
  1273    267.5 MiB      0.0 MiB           4               f'Lmin_{Lmin}__Lmax_{Lmax}__origin_{origin}__bps_{bps}__') 
  1274    267.5 MiB      0.0 MiB           1       if not os.path.exists(title):
  1275                                                 os.mkdir(title)
  1276                                         
  1277                                             # Calibration 
  1278    267.5 MiB      0.0 MiB           1       times = np.arange(0,tmax,dt)    # Discretisation of all times
  1279    267.5 MiB      0.0 MiB           1       alpha_0 = int(1e+0)             # Calibration on linear speed in order to multiplicate speeds by a linear number
  1280    267.5 MiB      0.0 MiB           1       epsilon_t = 1e-4                # Calibration on time in order to not generate infinite numbers
  1281    267.5 MiB      0.0 MiB           1       time_bin = int(1e+1)            # Bins on times during the all analysis
  1282                                         
  1283                                             # --- Simulation --- #
  1284                                         
  1285                                             # Landscape
  1286   4096.5 MiB   3829.0 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4096.5 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4096.5 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4175.6 MiB     79.0 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4175.6 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4192.7 MiB     17.1 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4205.0 MiB     12.3 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4280.5 MiB     75.6 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    465.9 MiB  -3814.7 MiB           1       del alpha_matrix
  1312    463.9 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    463.9 MiB      0.0 MiB          53       data_result = {
  1316    463.9 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    463.9 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    463.9 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    463.9 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    463.9 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    463.9 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    463.9 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    463.9 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    463.9 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    463.9 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    463.9 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    463.9 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    463.9 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    463.9 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    463.9 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    463.9 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    463.9 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    467.2 MiB      3.3 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    467.2 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    467.2 MiB      0.0 MiB          53           del data_result[key]
  1349    467.2 MiB      0.0 MiB          53           if key in locals():
  1350    467.2 MiB      0.0 MiB          53               del locals()[key]
  1351    467.2 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    467.2 MiB      0.0 MiB           1       return None


  1285                                             # Landscape
  1286   4092.3 MiB   3826.5 MiB           1       alpha_matrix, alpha_mean = alpha_matrix_calculation(alpha_choice, s, l, bpmin, alphao, alphaf, Lmin, Lmax, bps, nt)
  1287                                         
  1288                                             # Obstacles
  1289   4092.3 MiB      0.0 MiB           1       obs_points, obs_distrib, link_points, link_distrib = calculate_obs_and_linker_distribution(alpha_matrix[0], alphao, alphaf, step=1)
  1290                                         
  1291                                             # Probabilities
  1292   4092.3 MiB      0.0 MiB           1       p = proba_gamma(mu, theta, L)   # We'll have to read only once, the matrix of probabilities, instead of reading it each time.
  1293                                         
  1294                                             # Modeling 
  1295                                             # results, t_matrix, x_matrix = gillespie_algorithm_one_step(nt, tmax, dt, alpha_matrix, beta, Lmax, lenght, origin, p, epsilon_t) # Gillespie 1 step
  1296   4173.2 MiB     80.9 MiB           1       results, t_matrix, x_matrix = gillespie_algorithm_two_steps(nt, tmax, dt, alpha_matrix, beta, L, bps, origin, p) # Gillespie 2 steps
  1297                                         
  1298                                             # Results
  1299   4173.2 MiB      0.0 MiB           1       results_mean, results_med, results_std, v_mean, v_med = calculate_main_results(results, dt, alpha_0, nt)    
  1300                                         
  1301                                             # Times
  1302   4193.1 MiB     19.9 MiB           1       tbj_points, tbj_distrib = calculate_distrib_tbjs(t_matrix, tmax)
  1303   4204.3 MiB     11.3 MiB           1       fpt_distrib_2D, fpt_number = calculate_fpt_matrix(t_matrix, x_matrix, tmax, time_bin)
  1304                                         
  1305                                             # Speeds
  1306   4286.7 MiB     82.4 MiB           1       dx_points, dx_distrib, dx_mean, dx_med, dx_mp, dt_points, dt_distrib, dt_mean, dt_med, dt_mp, vi_points, vi_distrib, vi_mean, vi_med, vi_mp = calculate_instantaneous_statistics(t_matrix, x_matrix, nt)
  1307                                         
  1308                                             # --- Writing --- #
  1309                                         
  1310                                             # First cleaning
  1311    472.1 MiB  -3814.6 MiB           1       del alpha_matrix
  1312    470.1 MiB     -2.0 MiB           1       gc.collect()
  1313                                         
  1314                                             # Composing the main result that will be written
  1315    470.1 MiB      0.0 MiB          53       data_result = {
  1316    470.1 MiB      0.0 MiB           6           'alpha_choice': alpha_choice, 's': s, 'l': l, 'bpmin': bpmin, 'mu': mu, 'theta': theta, 
  1317    470.1 MiB      0.0 MiB           4           'nt': nt, 'tmax': tmax, 'dt': dt, 'times': times,
  1318    470.1 MiB      0.0 MiB           3           'alphao': alphao, 'alphaf': alphaf, 'beta': beta, 
  1319    470.1 MiB      0.0 MiB           4           'Lmin': Lmin, 'Lmax': Lmax, 'origin': origin, 'bps': bps,
  1320                                         
  1321    470.1 MiB      0.0 MiB           1           'alpha_mean': alpha_mean,
  1322    470.1 MiB      0.0 MiB           2           'obs_points':obs_points, 'obs_distrib':obs_distrib,
  1323    470.1 MiB      0.0 MiB           2           'link_points':link_points, 'link_distrib':link_distrib,
  1324    470.1 MiB      0.0 MiB           1           'p':p,
  1325                                         
  1326    470.1 MiB      0.0 MiB           2           't_matrix': t_matrix, 'x_matrix': x_matrix,
  1327    470.1 MiB      0.0 MiB           4           'results':results, 'results_mean':results_mean, 'results_med':results_med, 'results_std':results_std, 
  1328    470.1 MiB      0.0 MiB           2           'v_mean':v_mean, 'v_med':v_med,
  1329                                         
  1330    470.1 MiB      0.0 MiB           2           'tbj_points':tbj_points, 'tbj_distrib':tbj_distrib,
  1331    470.1 MiB      0.0 MiB           3           'time_bin':time_bin, 'fpt_distrib_2D':fpt_distrib_2D, 'fpt_number':fpt_number,
  1332                                                 
  1333    470.1 MiB      0.0 MiB           5           'dx_points':dx_points, 'dx_distrib':dx_distrib, 'dx_mean':dx_mean, 'dx_med':dx_med, 'dx_mp':dx_mp, 
  1334    470.1 MiB      0.0 MiB           5           'dt_points':dt_points, 'dt_distrib':dt_distrib, 'dt_mean':dt_mean, 'dt_med':dt_med, 'dt_mp':dt_mp, 
  1335    470.1 MiB      0.0 MiB           5           'vi_points':vi_points, 'vi_distrib':vi_distrib, 'vi_mean':vi_mean, 'vi_med':vi_med, 'vi_mp':vi_mp,
  1336                                         
  1337    470.1 MiB      0.0 MiB           1           'alpha_0':alpha_0, 'epsilon_t':epsilon_t
  1338                                             }
  1339                                         
  1340                                             # # Types of data registered if needed
  1341                                             # inspect_data_types(data_result)
  1342                                         
  1343                                             # Writing event
  1344    470.5 MiB      0.4 MiB           1       nucleo_writing_parquet(title, data_result)
  1345                                         
  1346                                             # Second cleaning
  1347    470.5 MiB      0.0 MiB          54       for key in list(data_result.keys()):
  1348    470.5 MiB      0.0 MiB          53           del data_result[key]
  1349    470.5 MiB      0.0 MiB          53           if key in locals():
  1350    470.5 MiB      0.0 MiB          53               del locals()[key]
  1351    470.5 MiB      0.0 MiB           1       gc.collect()
  1352                                         
  1353                                             # Done
  1354    470.5 MiB      0.0 MiB           1       return None



#- Finished in 55m at /home/nicolas/Documents/Progs -#

